// Find element that appears only once in an sorted array where all other elements appear twice one after another. Solve in O(logn) complexity.

// Solution 1:
// Input:
let arr = [1,1,3,3,4,5,5,5,7,7,8,8,9,9];

function singleElement(arr) {
  for(var i = 0; i < arr.length; i++) {
    if(arr[i] === arr[i + 1]){
      i++;
    }
    else {
      return arr[i];
    }
  }
}

singleElement(arr);


// Solution 2:
// Solve using hash map

function singleElementHash(arr) {
  let hash = {};
  for(let i = 0; i < arr.length; i++) {
    if(!hash[arr[i]]) {
      hash[arr[i]] = 1; 
    }
    else {
      hash[arr[i]] += 1;
    }
  }
  for(let i = 0; i < arr.length; i++) {
    if(hash[arr[i]] === 1) {
      return arr[i];
    }
  }
}

singleElementHash(arr);


// Solution 3:
// Solve for where there are multiple sinigle elements in a sorted array
// Solve using hash map 

function multiSingleElementHash(arr) {
  let hash = {};
  let singleElements = [];
  for(let i = 0; i < arr.length; i++) {
    if(!hash[arr[i]]) {
      hash[arr[i]] = 1; 
    }
    else {
      hash[arr[i]] += 1;
    }
  }
  for(let i = 0; i < arr.length; i++) {
    if(hash[arr[i]] === 1) {
      singleElements.push(arr[i]);
    }
  }
  return singleElements
}

multiSingleElementHash(arr);